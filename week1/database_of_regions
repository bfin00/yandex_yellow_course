#include <iostream>
#include <vector>
#include <map>
#include <tuple>
using namespace std;
enum class Lang {
  DE, FR, IT
};
struct Region {
  string std_name;
  string parent_std_name;
  map<Lang, string> names;
  int64_t population;
};
bool operator<(const Region& lhs, const Region& rhs)
{
    auto left = tie(lhs.std_name, lhs.parent_std_name, lhs.names, lhs.population);
    auto right = tie(rhs.std_name, rhs.parent_std_name, rhs.names, rhs.population);
    return left < right;
}

int FindMaxRepetitionCount(const vector<Region>& regions)
{
    if (regions.empty())
        return 0;
    map<Region, int> count;
    for (size_t i = 0; i < regions.size(); ++i)
    {
        if (count.find(regions[i]) == count.end())
        {
            count.insert(pair<Region, int>(regions[i], 1));
        }
        else
        {
            count.find(regions[i])->second++;
        }
    }
    if (count.empty())
    {
        return 1;
    }
    int max = count.begin()->second;
    for (auto it = ++count.begin(); it != count.end(); ++it)
    {
        if (it->second > max)
        {
            max = it->second;
        }
    }
    return max;
};
int main() {
  cout << FindMaxRepetitionCount({
      {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Russia",
          "Eurasia",
          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Russia",
          "Eurasia",
          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
          89
     }, }) << endl;

  cout << FindMaxRepetitionCount({
      {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Russia",
          "Eurasia",
          {{Lang::DE, "Russland"}, {Lang::FR, "Russie"}, {Lang::IT, "Russia"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou deux"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Moscow",
          "Toulouse",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          89
      }, {
          "Moscow",
          "Russia",
          {{Lang::DE, "Moskau"}, {Lang::FR, "Moscou"}, {Lang::IT, "Mosca"}},
          31
      },
  }) << endl;

  return 0;
}
